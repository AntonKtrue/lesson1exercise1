package ru.csssr.quest;
import java.util.Comparator;

public class CyrillicYoComparator implements Comparator<String> {

	@Override
	public int compare(String o1, String o2) {

		if(o1.length() != o2.length()) return o2.length() - o1.length();

		//ohh Ё и ё...
		int len1 = o1.toCharArray().length;
        int len2 = o2.toCharArray().length;
        int lim = Math.min(len1, len2);
        char v1[] = o1.toCharArray();
        char v2[] = o2.toCharArray();

        int k = 0;
        while (k < lim) {
            char c1 = v1[k];
            char c2 = v2[k];
            if (c1 != c2) {
                if(c1=='Ё' || c1=='ё' || c2=='Ё' || c2=='ё' ) {
                	if(c1=='Ё') {
                		if(c2>'Е') return -1;
                		else return 1;
                	}
                	if(c1=='ё') {
                		if(c2>'е') return -1;
                		else return 1;
                	}
                	if(c2=='Ё') {
                		if(c1>'Е') return 1;
                		else return -1;
                	}
                	if(c2=='ё') {
                		if(c1>'е') return 1;
                		else return -1;
                	}
                }
                else {
                	return c1 - c2;
                }
            }
            k++;
        }
        return len1 - len2;

	}

}
package ru.csssr.quest;
import java.util.Comparator;

public class CyrillicYoComparator implements Comparator<String> {

	@Override
	public int compare(String o1, String o2) {

		if(o1.length() != o2.length()) return o2.length() - o1.length();

		//ohh Ё и ё...
		int len1 = o1.toCharArray().length;
        int len2 = o2.toCharArray().length;
        int lim = Math.min(len1, len2);
        char v1[] = o1.toCharArray();
        char v2[] = o2.toCharArray();

        int k = 0;
        while (k < lim) {
            char c1 = v1[k];
            char c2 = v2[k];
            if (c1 != c2) {
                if(c1=='Ё' || c1=='ё' || c2=='Ё' || c2=='ё' ) {
                	if(c1=='Ё') {
                		if(c2>'Е') return -1;
                		else return 1;
                	}
                	if(c1=='ё') {
                		if(c2>'е') return -1;
                		else return 1;
                	}
                	if(c2=='Ё') {
                		if(c1>'Е') return 1;
                		else return -1;
                	}
                	if(c2=='ё') {
                		if(c1>'е') return 1;
                		else return -1;
                	}
                }
                else {
                	return c1 - c2;
                }
            }
            k++;
        }
        return len1 - len2;

	}

}
package ru.csssr.quest;
import java.util.Comparator;

public class CyrillicYoComparator implements Comparator<String> {

	@Override
	public int compare(String o1, package ru.csssr.quest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Quest {


	public static void main(String args[]) {
		String test1 = "бобёр болк аю hello happy haven аё ал ели есть жизнь жесть еж ее её ёу ёёёу ёёёё ёёёе ёёёж ёёё ёё ёе ёж яблоко яблочный борислав бутус больск болодя барбуз бакрон гад арбуз аркон аккумулятор арифметика вол волк волчара власть";
		new SplitSorter(test1);
	}

	private static class SplitSorter {
		private CyrillicYoComparator cyrComparator =  new CyrillicYoComparator();

		public SplitSorter(String inputString) {
			String[] words = inputString.split(" ");

			TreeMap<String, List<String>> groups = new StructuredStringMap<>(cyrComparator);
			for(String word : words) {
				if(groups.containsKey(word.substring(0,1))) {
					groups.get(word.substring(0,1)).add(word);
				} else {
					List<String> list = new LinkedList<String>();
					list.add(word);
					groups.put(word.substring(0,1), list);
				}
			}
			for(Map.Entry<String,List<String>> entry : groups.entrySet()) {
				Collections.sort(entry.getValue(), new CyrillicYoComparator());

			}
			System.out.println(groups);

		}
	}

}
package ru.csssr.quest;

import java.util.Comparator;
import java.util.Iterator;

import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.Map.Entry;
import java.util.SortedMap;
/**
 * This class is necessary for outputting a string in
 * a specified way ({} replaced by a [])
 * and the filter is installed on the output
 * where the number of list items is greater than 1
 *
 * @author Anton Kitov
 * @see TreeMap
 * @param <K> key for TreeMap
 * @param <V> extends from List<String> list member to output
 */
@SuppressWarnings("serial")
public class StructuredStringMap<K, V extends List<String>> extends TreeMap<K, V>{

	public StructuredStringMap(Comparator<? super K> comparator) {
		super(comparator);
	}

	@Override
	public String toString() {
		Iterator<Entry<K,V>> i = entrySet().iterator();
        if (! i.hasNext())
            return "[]";

        StringBuilder sb = new StringBuilder();
        sb.append('[');
        boolean firstElementFlag = true;
        for (;;) {
            Entry<K,V> e = i.next();
            K key = e.getKey();
            V value = e.getValue();
            if(value.size() < 2) {
            	if (! i.hasNext())
                    return sb.append(']').toString();
            	continue;
            }

			if(firstElementFlag) {
            	firstElementFlag = false;
            } else {
            	sb.append(',').append(' ');
            }
            sb.append(key);
            sb.append('=');
            sb.append(value);
            if (! i.hasNext())
                return sb.append(']').toString();

        }
	}




}
